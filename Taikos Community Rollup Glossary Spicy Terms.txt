"Bytecode-equivalent ZK-EVM"|"
A <a href=""https://rollup-glossary.vercel.app/other-terms#zk-rollup"">ZK-Rollup</a> that can interpret and execute <a href=""https://rollup-glossary.vercel.app/other-terms#Ethereum-Virtual-Machine-(EVM)"">EVM</a> <a href=""https://rollup-glossary.vercel.app/other-terms#bytecode"">bytecode</a>. All EVM opcodes and pre-compiles are supported and provable through the <a href=""https://rollup-glossary.vercel.app/other-terms#zk-evm"">ZK-EVM</a> <a href=""https://rollup-glossary.vercel.app/other-terms#circuit"">circuit</a>, but gas costs for EVM opcodes might be changed. (Type 2.5 in <a href=""https://vitalik.ca/general/2022/08/04/zkevm.html"">Vitalik's classification</a>
).
"
"Data availability"|"
The property of a <a href=""https://rollup-glossary.vercel.app/#rollup"">rollup</a>â€™s state being reachable by any <a href=""https://rollup-glossary.vercel.app/other-terms#node"">node</a> retrieving the inputs that were rolled up and executed to reach said state. Data availability (DA), specifically decoupling it from the rollup nodes themselves, is one of the preeminent factors which allows a rollup to <a href=""https://rollup-glossary.vercel.app/#Scalability"">scale</a> securely. A rollup is faced with a decision of what to use as a DA layer to guarantee that any node can retrieve this data--permissionlessly under any circumstance. For this reason, using Ethereum for DA currently provides the strongest security guarantees. If data is stored somewhere other than a permissionless <a href=""/other-terms#Layer-1"">L1</a>
, then the <a href=""https://rollup-glossary.vercel.app/#Layer-2"">L2</a> is not a rollup, but some other type of L2.
"
"Decentralized rollup"|"
There are several factors within a <a href=""https://rollup-glossary.vercel.app/#rollup"">rollup</a> construction which separately can be more or less decentralized, leading to the degree to which the rollup as a whole is uncapturable by a central entity. The most significant factors include who can run a <a href=""/other-terms#node"">node</a>
, who can <a href=""https://rollup-glossary.vercel.app/#proposer"">propose</a> <a href=""https://rollup-glossary.vercel.app/other-terms#block"">blocks</a>, who can <a href=""https://rollup-glossary.vercel.app/#prover"">prove</a> blocks (in <a href=""https://rollup-glossary.vercel.app/other-terms#ZK-Rollup"">ZK-Rollups</a>), and who can <a href=""https://rollup-glossary.vercel.app/#Upgradeability"">upgrade</a> the rollup <a href=""https://rollup-glossary.vercel.app/other-terms#Smart-contract"">smart contracts</a>. For the factors of ""who can run a node/proposer/prover"", the question asks both: is it <a href=""permissionless"">permissionless</a>
 for anyone to run these (no allow-list); and how reasonable is it in terms of hardware required.
"
"Ethereum-equivalent ZK-EVM"|"
A <a href=""https://rollup-glossary.vercel.app/other-terms#ZK-Rollup"">ZK-Rollup</a> that can <a href=""https://rollup-glossary.vercel.app/other-terms#Prover"">prove</a> the correctness of an actual Ethereum <a href=""https://rollup-glossary.vercel.app/other-terms#Layer-1"">L1</a> <a href=""https://rollup-glossary.vercel.app/other-terms#Block"">block</a> in its <a href=""https://rollup-glossary.vercel.app/#ZK-EVM"">ZK-EVM</a> <a href=""https://rollup-glossary.vercel.app/other-terms#circuit"">circuit</a>. No changes made to any part of Ethereum--EVM but also peripheral things like storage structures and hash functions. (Type 1 in <a href=""https://vitalik.ca/general/2022/08/04/zkevm.html"">Vitalik's classification</a>).
"
"EVM-equivalent ZK-EVM"|"
A <a href=""https://rollup-glossary.vercel.app/other-terms#ZK-Rollup"">ZK-Rollup</a> that can interpret and execute <a href=""https://rollup-glossary.vercel.app/other-terms#Ethereum-Virtual-Machine-(EVM)"">EVM</a> <a href=""https://rollup-glossary.vercel.app/other-terms#Bytecode"">bytecode</a>. All EVM opcodes and <a href=""https://rollup-glossary.vercel.app/other-terms#Pre-compiles"">pre-compiles</a> are supported and provable through the <a href=""https://rollup-glossary.vercel.app/#ZK-EVM"">ZK-EVM</a> <a href=""https://rollup-glossary.vercel.app/other-terms#circuit"">circuit</a>. (Type 2 in <a href=""https://vitalik.ca/general/2022/08/04/zkevm.html"">Vitalik's classification</a>).
"
"Bytecode-compatible (EVM-compatible) ZK-EVM"|"
A <a href=""https://rollup-glossary.vercel.app/other-terms#ZK-Rollup"">ZK-Rollup</a> that can interpret and execute Ethereum <a href=""https://rollup-glossary.vercel.app/other-terms#Bytecode"">bytecode</a>, with some changes made to certain components of the <a href=""https://rollup-glossary.vercel.app/other-terms#Ethereum-Virtual-Machine-(EVM)"">EVM</a>, such as different gas costs, or some unsupported features. (Type 2.5 and 3 in <a href=""https://vitalik.ca/general/2022/08/04/zkevm.html"">Vitalik's classification</a>
).
"
"Finality"|"
> Needs help: some people distinguish order vs execution finality.

Finality is a scale--when a valid <a href=""https://rollup-glossary.vercel.app/#Layer-2"">L2</a> <a href=""https://rollup-glossary.vercel.app/other-terms#Transaction"">transaction</a> is included in an <a href=""https://rollup-glossary.vercel.app/other-terms#Layer-1"">L1</a> <a href=""https://rollup-glossary.vercel.app/other-terms#Block"">block</a>, it has the same finality as that enclosing block. This is different from correctness, because incorrect state transitions can still have a concept of finality in an enclosing L1 block but be later proven as invalid.
"
"Language-compatible ZK-EVM"|"
A <a href=""https://rollup-glossary.vercel.app/other-terms#ZK-Rollup"">ZK-Rollup</a> that can interpret and execute Solidity or other high-level-language source code. This code is compiled into <a ref="/other-terms#Bytecode"">bytecode</a> that differs from that which the <a href=""https://rollup-glossary.vercel.app/other-terms#Ethereum-Virtual-Machine-(EVM)"">EVM</a>) runs. (Type 4 in <a href=""https://vitalik.ca/general/2022/08/04/zkevm.html"">Vitalik's classification</a>).
"
"Layer 2"|"
Layer 2 (L2) is a category of technical solutions which build upon an <a href=""https://rollup-glossary.vercel.app/other-terms#layer-1"">L1</a> with the aim of improving <a href=""https://rollup-glossary.vercel.app/#scalability"">scalability</a>, privacy, or other properties. L2s make use of L1 to bootstrap security and <a href=""https://rollup-glossary.vercel.app/other-terms#settlement"">ettlement</a>
 guarantees. The L2 and L1 de-composition represents an example of a <a href=""https://rollup-glossary.vercel.app/other-terms#Modular-blockchains"">odular blockchain</a>
 framework.
"
"Permissionless"|"
Anyone willing should be able to join and leave the <a href=""https://rollup-glossary.vercel.app/other-terms#Network"">network</a> at any time, without causing significant disturbance to the network or being detrimental to the party in question. No single entity should have the power to allowlist or blocklist participants.
"
"Rollup"|"
A rollup is a chain, specifically a chain which is derived from a base chain's state (the base chain in this context can be referred to as a data availability layer). A rollup does not need a proving system, because it is defined by the state of the base chain and how it is derived. A proving system does not define a rollup, but it's a mechanism for one chain to develop some confidence to trust the data from some other chain. A rollup is another chain, and multiple rollups means higher bandwidth, similar to lanes of traffic on the highway, which offers cheaper fees. Also, it might omit taking part in consensus, which reduces costs as well (and relying on the consensus of the base chain).
"
"Scalability"|"
The ability of a blockchain to handle a high level of throughput as measured in transactions per second (TPS), holding <a href=""https://rollup-glossary.vercel.app/#decentralized-rollup"">decentralization</a> and hardware requirements constant.
"
"Trustless"|"
The ability of a <a href=""https://rollup-glossary.vercel.app/other-terms#Network"">network</a> to mediate <a href=""https://rollup-glossary.vercel.app/other-terms#Transaction"">transactions</a> without any of the involved parties needing to trust a third party. A further definition may be: given a starting set of trust assumptions or point of understanding, the inability for this understanding to be unilaterally changed by any one party.
"
"Upgradeability"|"
The ability for <a href=""https://rollup-glossary.vercel.app/other-terms#rollup-contracts"">rollup smart contracts</a> and parameters used in a rollup to be updated by holders of an admin key. Upgradeability represents a vector of risk for users, and should be decentralized and combined with <a href=""https://rollup-glossary.vercel.app/other-terms#time-delay"">time delays</a> for greater security guarantees.
"
"ZK-EVM"|"
A ZK-EVM is understood as either:
- A set of <a href=""https://rollup-glossary.vercel.app/other-terms#circuit"">circuits</a> that prove the execution of the <a href=""https://rollup-glossary.vercel.app/other-terms#Ethereum-Virtual-Machine-(EVM)"">Ethereum Virtual Machine (VM)</a>). It is the core component of a <a href=""https://rollup-glossary.vercel.app/other-terms#ZK-Rollup"">ZK-Rollup</a> that generates <a href=""https://rollup-glossary.vercel.app/other-terms#Validity-proof"">validity proofs</a> to verify the correctness of programs.
- The <a href=""https://rollup-glossary.vercel.app/other-terms#ZK-Rollup"">ZK-Rollup</a> as a whole which offers <a href=""https://rollup-glossary.vercel.app/#Bytecode-compatible-(EVM-compatible)-ZK-EVM"">EVM-compatible</a> execution, and proves that execution with <a href=""https://rollup-glossary.vercel.app/other-terms#circuit"">circuits</a> that generate <a href=""https://rollup-glossary.vercel.app/other-terms#Validity-proof"">validity proofs</a>."